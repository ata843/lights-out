{"version":3,"sources":["Light.tsx","Win.tsx","Board.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Light","litStyle","width","this","props","buttonSize","height","style","className","lit","onClick","onClickHandler","React","Win","result","winStyle","display","win","rate","onReset","disabled","started","Board","tick","setTimeout","state","stopped","setState","prevState","sec","min","timerSec","timerMin","componentDidMount","clearBoard","brd","Array","i","size","push","lits","reset","level","steps","shuffle","clicks","rndm","Math","floor","random","indexOf","winHandler","isPlay","map","lt","index","find","gridCols","gridSize","boardStyle","gridTemplateColumns","gridTemplateRows","board","currentSteps","App","setWin","setTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAsBeA,E,4JAZX,WACI,IAAMC,EAAW,CACbC,MAAM,GAAD,OAAKC,KAAKC,MAAMC,WAAhB,MACLC,OAAO,GAAD,OAAKH,KAAKC,MAAMC,WAAhB,QAGV,OACI,wBAAQE,MAAON,EAAUO,UAAWL,KAAKC,MAAMK,IAAM,MAAQ,OAAQC,QAASP,KAAKC,MAAMO,eAAzF,sB,GARQC,aC8BLC,E,4JA3BX,WACI,IAIIC,EAJEC,EAAW,CACbC,QAASb,KAAKC,MAAMa,IAAM,QAAU,QAaxC,OAPIH,EADoB,IAApBX,KAAKC,MAAMc,KACF,YACFf,KAAKC,MAAMc,KAAO,EAChB,aAEA,MAIT,sBAAKV,UAAU,WAAf,UACI,6BAAI,sBAAMD,MAAOQ,EAAb,SAAwBD,MAC5B,sBAAKN,UAAU,UAAf,UACI,wBAAQE,QAAUP,KAAKC,MAAMe,QAA7B,mBACA,wBAAQC,UAAYjB,KAAKC,MAAMiB,UAAYlB,KAAKC,MAAMa,IAAMP,QAAUP,KAAKC,MAAMO,eAAjF,SAAoGR,KAAKC,MAAMiB,QAAU,YAAc,0B,GArBzIT,aC0MHU,E,kDAhMX,WAAYlB,GAAoB,IAAD,8BAC3B,cAAMA,IAeVmB,KAAO,WACHC,YAAW,WACF,EAAKC,MAAMC,UACZ,EAAKC,UAAS,SAACC,GACX,IAAIC,EACAC,EAQJ,OAPIF,EAAUG,SAAW,IAAM,IAC3BF,EAAM,EACNC,EAAMF,EAAUI,SAAW,IAE3BH,EAAMD,EAAUG,SAAW,EAC3BD,EAAMF,EAAUI,UAEb,CACHD,SAAUF,EACVG,SAAUF,MAGlB,EAAKP,UAEV,MApCwB,EAuC/BU,kBAAoB,WAChB,EAAKC,cAxCsB,EA6C/BA,WAAa,WAET,IADA,IAAMC,EAAM,IAAIC,MACPC,EAAI,EAAGA,EAAI,EAAKZ,MAAMa,KAAO,EAAKb,MAAMa,KAAMD,IACnDF,EAAII,MAAK,GAGb,EAAKZ,SAAS,CACVa,KAAML,KApDiB,EA2D/BM,MAAQ,WACJ,EAAKP,aACL,EAAKP,SAAS,CACVV,KAAK,EACLyB,MAAO,EACPC,MAAO,EACPjB,SAAS,EACTM,SAAU,EACVD,SAAU,KAnEa,EAwE/Ba,QAAU,WASN,GARA,EAAKV,cAED,EAAKT,MAAMR,KAA4B,IAArB,EAAKQ,MAAMiB,QAC7B,EAAKf,SAAS,CACVe,MAAQ,EAAKjB,MAAMiB,MAAQ,EAAKjB,MAAMa,KAAO,EAAKb,MAAMa,KAAQ,EAAKb,MAAMiB,MAAQ,EAAI,IAI3F,EAAKjB,MAAMiB,MAAS,EAAKjB,MAAMa,KAAO,EAAKb,MAAMa,KAAQ,EAAG,CAE5D,IADA,IAAIO,EAAS,IAAIT,MACRC,EAAI,EAAGA,EAAI,EAAKZ,MAAMiB,MAAQ,EAAGL,IAAK,CAC3C,IAAIS,OAAwB,EAE5B,GACIA,EAAOC,KAAKC,MAAMD,KAAKE,SAAW,EAAKxB,MAAMa,KAAO,EAAKb,MAAMa,aAE3DO,EAAOK,QAAQJ,IAEvB,EAAKnC,eAAemC,GACpBD,EAAON,KAAKO,GAGhB,EAAKnB,SAAS,CACVgB,MAAO,EACPjB,SAAS,EACTK,SAAU,EACVC,SAAU,IAGd,EAAK5B,MAAM+C,YAAW,GACtB,EAAK5B,SAvGkB,EA6G/BZ,eAAiB,SAAC0B,GACd,IAAIe,EAEJ,EAAKzB,UAAS,SAACC,GACX,IAAMnB,EAAMmB,EAAUY,KAAKa,KAAI,SAACC,EAAaC,GACzC,OACKA,IAAUlB,EAAIT,EAAUU,MACxBiB,IAAUlB,EAAI,GAAMA,EAAIT,EAAUU,OAAU,GAC5CiB,IAAUlB,GACVkB,IAAUlB,EAAI,GAAMA,EAAIT,EAAUU,OAAWV,EAAUU,KAAO,GAC9DiB,IAAUlB,EAAIT,EAAUU,MAEjBgB,EAEDA,KAMf,OAFAF,EAAS3C,EAAI+C,MAAK,SAACF,GAAD,OAAiBA,KAE5B,CACHd,KAAM/B,EACNkC,MAAQf,EAAUF,QAAWE,EAAUe,MAAQf,EAAUe,MAAQ,EACjEjB,SAAS0B,EACTnC,KAAKmC,OAlIb,EAAK3B,MAAQ,CACTiB,MAAO,EACPJ,KAAM,EACNpC,MAAO,IACPsC,KAAM,GACNG,MAAO,EACPjB,SAAS,EACTT,KAAK,EACLc,SAAU,EACVC,SAAU,GAZa,E,0CA4I/B,WAGI,IAHM,IAAD,OACDyB,EAAkB,GAClBC,EAAkBvD,KAAKsB,MAAMvB,MAAQC,KAAKsB,MAAMa,KAC3CD,EAAI,EAAGA,EAAIlC,KAAKsB,MAAMa,KAAMD,IAC7BA,EAAI,IACJoB,GAAY,KAGhBA,GAAQ,UAAOC,EAAP,MAGZ,IAAMC,EAAa,CACf3C,QAAS,OACT4C,oBAAqBH,EACrBI,iBAAkBJ,GAGlBtD,KAAKsB,MAAMR,KACXd,KAAKC,MAAM+C,YAAW,GAG1B,IAAMW,EAAQ1B,QAed,OAbAjC,KAAKsB,MAAMe,KAAKa,KAAI,SAAC5C,EAAc8C,GAU/B,OATAO,EAAMvB,KACF,cAAC,EAAD,CAEI9B,IAAKA,EACLJ,WAAY,EAAKoB,MAAMvB,MAAQ,EAAKuB,MAAMa,KAC1C3B,eAAgB,kBAAO,EAAKc,MAAMC,QAAW,aAAY,EAAKf,eAAe4C,KAHxEA,KAON,KAIP,sBAAK/C,UAAU,kBAAf,UACI,cAAC,EAAD,CAAKa,QAAUlB,KAAKsB,MAAMiB,MAAQ,EAAIzB,IAAKd,KAAKsB,MAAMR,IAAKC,KAAMf,KAAKsB,MAAMiB,MAAQvC,KAAKsB,MAAMkB,MAAOxB,QAAU,WAAQ,EAAKsB,SAAW9B,eAAgB,WAAQ,EAAKiC,WAAamB,aAAc5D,KAAKsB,MAAMkB,QAC3M,qBAAKpC,MAAOoD,EAAZ,SACKG,IAEL,sBAAKtD,UAAU,WAAf,UACI,sBAAKA,UAAU,QAAf,oBAA+BL,KAAKsB,MAAMkB,SAC1C,qBAAKnC,UAAU,QAAf,SAAyBL,KAAKsB,MAAMiB,MAAQ,EAAK,SAAWvC,KAAKsB,MAAMiB,MAAQ,KAC/E,sBAAKlC,UAAU,QAAf,mBAA+BL,KAAKsB,MAAMO,SAAW,GAAM,IAAM,GAAI7B,KAAKsB,MAAMO,SAAhF,IAA4F7B,KAAKsB,MAAMM,SAAW,GAAM,IAAM,GAAI5B,KAAKsB,MAAMM,sB,GA1L7InB,a,MCCLoD,MAjBf,WAAgB,IAAD,EACSpD,YAAe,GADxB,mBACNK,EADM,KACDgD,EADC,KAIb,OACE,sBAAKzD,UAAYS,EAAO,UAAY,MAApC,UACE,qBAAKT,UAAU,UACf,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,uCAAS,qCAAT,WACA,cAAC,EAAD,CAAO2C,WAAY,SAACe,GAAoBD,EAAOC,eCF1CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d32c0072.chunk.js","sourcesContent":["import * as React from 'react'\n\ntype LightProps = {\n    key: number,\n    lit: boolean,\n    buttonSize: number,\n    onClickHandler: React.MouseEventHandler<HTMLButtonElement>\n}\n\nclass Light extends React.Component<LightProps, {}> {\n    render() {\n        const litStyle = {\n            width: `${this.props.buttonSize}px`,\n            height: `${this.props.buttonSize}pxs`\n        }\n\n        return (\n            <button style={litStyle} className={this.props.lit ? 'lit' : 'dark'} onClick={this.props.onClickHandler}>&nbsp;</button>\n        )\n    }\n}\n\nexport default Light","import * as React from 'react'\n\ntype WinProps = {\n    started: boolean\n    win: boolean\n    rate: number\n    onClickHandler: React.MouseEventHandler<HTMLButtonElement>\n    onReset: React.MouseEventHandler<HTMLButtonElement>\n    currentSteps: number\n}\n\nclass Win extends React.Component<WinProps, {}> {\n    render() {\n        const winStyle = {\n            display: this.props.win ? 'block' : 'none'\n        }\n\n        let result:string\n        \n        if (this.props.rate === 1) {\n            result = \"Flawless!\"\n        } else if (this.props.rate > 1) {\n            result = \"Excellent!\"\n        } else {\n            result = \"Ok.\"\n        }\n\n        return (\n            <div className=\"controls\">\n                <h2><span style={winStyle}>{result}</span></h2>\n                <div className=\"buttons\">\n                    <button onClick={ this.props.onReset}>Reset</button>\n                    <button disabled={ !this.props.started && !this.props.win } onClick={ this.props.onClickHandler }>{ this.props.started ? \"New\\nGame\" : \"Next\\nLevel\" }</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Win","import * as React from 'react'\nimport Light from './Light'\nimport Win from './Win'\n\ntype BoardProps = {\n    winHandler: Function\n}\n\ninterface BoardStates {\n    size: number,\n    level: number,\n    lits: Array<boolean>,\n    steps: number,\n    stopped: boolean,\n    win: boolean,\n    timerSec: number,\n    timerMin: number\n    width: number\n}\n\nclass Board extends React.Component<BoardProps, BoardStates> {\n    constructor(props: BoardProps) {\n        super(props)\n\n        this.state = {\n            level: 0,\n            size: 5,\n            width: 340,\n            lits: [],\n            steps: 0,\n            stopped: true,\n            win: false,\n            timerSec: 0,\n            timerMin: 0\n        }\n    }\n\n    tick = () => {\n        setTimeout(() => {\n            if (!this.state.stopped) {\n                this.setState((prevState) => {\n                    let sec: number\n                    let min: number\n                    if (prevState.timerSec + 1 === 60) {\n                        sec = 0\n                        min = prevState.timerMin + 1\n                    } else {\n                        sec = prevState.timerSec + 1\n                        min = prevState.timerMin\n                    }\n                    return {\n                        timerSec: sec,\n                        timerMin: min\n                    }\n                })\n                this.tick()\n            }\n        }, 1000)\n    }\n\n    componentDidMount = () => {\n        this.clearBoard()\n\n        return\n    }\n\n    clearBoard = () => {\n        const brd = new Array<boolean>()\n        for (let i = 0; i < this.state.size * this.state.size; i++) {\n            brd.push(false)\n        }\n\n        this.setState({\n            lits: brd\n        })\n\n        return\n    }\n\n\n    reset = () => {\n        this.clearBoard()\n        this.setState({\n            win: false,\n            level: 0,\n            steps: 0,\n            stopped: true,\n            timerMin: 0,\n            timerSec: 0\n        })\n    }\n\n\n    shuffle = () => {\n        this.clearBoard()\n\n        if (this.state.win || this.state.level === 0) {\n            this.setState({\n                level: (this.state.level < this.state.size * this.state.size) ? this.state.level + 1 : 1\n            })\n        }\n\n        if (this.state.level < (this.state.size * this.state.size) + 1) {\n            let clicks = new Array<number>()\n            for (let i = 0; i < this.state.level + 1; i++) {\n                let rndm: number | undefined\n\n                do {\n                    rndm = Math.floor(Math.random() * this.state.size * this.state.size)\n                }\n                while (!clicks.indexOf(rndm))\n\n                this.onClickHandler(rndm)\n                clicks.push(rndm)\n            }\n\n            this.setState({\n                steps: 0,\n                stopped: false,\n                timerSec: 0,\n                timerMin: 0\n            })\n\n            this.props.winHandler(false)\n            this.tick()\n        }\n\n        return\n    }\n\n    onClickHandler = (i: number) => {\n        let isPlay: boolean | undefined\n\n        this.setState((prevState) => {\n            const lit = prevState.lits.map((lt: boolean, index: number) => {\n                if (\n                    (index === i - prevState.size) ||\n                    (index === i - 1 && (i % prevState.size) !== 0) ||\n                    (index === i) ||\n                    (index === i + 1 && (i % prevState.size) !== (prevState.size - 1)) ||\n                    (index === i + prevState.size)\n                ) {\n                    return !lt\n                } else {\n                    return lt\n                }\n            })\n\n            isPlay = lit.find((lt: boolean) => lt)\n\n            return {\n                lits: lit,\n                steps: (prevState.stopped) ? prevState.steps : prevState.steps + 1,\n                stopped: isPlay ? false : true,\n                win: isPlay ? false : true\n            }\n        })\n\n        return\n    }\n\n    render() {\n        let gridCols:string = \"\"\n        let gridSize:number = this.state.width / this.state.size\n        for (let i = 0; i < this.state.size; i++) {\n            if (i > 0) {\n                gridCols += \" \"\n            }\n\n            gridCols += `${gridSize}px`\n        }\n\n        const boardStyle = {\n            display: \"grid\",\n            gridTemplateColumns: gridCols,\n            gridTemplateRows: gridCols,\n        }\n\n        if (this.state.win) {\n            this.props.winHandler(true)\n        }\n\n        const board = Array<JSX.Element>()\n\n        this.state.lits.map((lit: boolean, index: number) => {\n            board.push(\n                <Light\n                    key={index}\n                    lit={lit}\n                    buttonSize={this.state.width / this.state.size}\n                    onClickHandler={() => (this.state.stopped) ? () => { } : this.onClickHandler(index)}\n                />\n            )\n\n            return true\n        })\n\n        return (\n            <div className=\"board-container\">\n                <Win started={ this.state.level < 1 } win={this.state.win} rate={this.state.level / this.state.steps} onReset={ () => { this.reset() }} onClickHandler={() => { this.shuffle() }} currentSteps={this.state.steps} />\n                <div style={boardStyle}>\n                    {board}\n                </div>\n                <div className=\"counters\">\n                    <div className=\"steps\">Steps: {this.state.steps}</div>\n                    <div className=\"level\">{(this.state.level > 0) ? \"Level \" + this.state.level : \"\"}</div>\n                    <div className=\"timer\">Time: {(this.state.timerMin < 10) ? \"0\" : \"\"}{this.state.timerMin}:{(this.state.timerSec < 10) ? \"0\" : \"\"}{this.state.timerSec}</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board","import * as React from 'react'\nimport Board from './Board'\nimport './App.css'\n\nfunction App() {\n  const [win, setWin] = React.useState(false)\n\n\n  return (\n    <div className={(win) ? \"App win\" : \"App\"}>\n      <div className=\"winBg\"></div>\n      <div className=\"second-bg\">\n        <div className=\"game\">\n          <h1>Light<span>s</span> Out!</h1>\n          <Board winHandler={(setTo: boolean) => {setWin(setTo)}} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}